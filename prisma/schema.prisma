// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                      String                    @id @default(cuid())
  username                String                    @unique
  password_hash           String
  email                   String                    @unique
  emailVerified           DateTime?
  created_at              DateTime                  @default(now())
  screen_name             String?
  socket_id               String?
  timezone                String?
  share_timezone          Boolean?
  person_description      String?
  profile_image           String?
  person_status           String?
  server_members          ServerMember[]
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]
  accounts                Account[]
  characters               CharacterBase[]
  notifications           Notification[]
}

model Server {
  id                String         @id @default(cuid())
  socket_id         String?
  server_name       String
  image             String?
  jamboard          String?
  gameboard         String?
  created_at        DateTime       @default(now())
  description       String?
  config            ServerConfig[]
  server_members    ServerMember[]
  channels          Channel[]
  character_config  ServerCharacterConfig[]
  characters        ServerCharacter[]
  invitations       Invitation[]
  notifications     Notification[]
  notes          Note[]
}

model ServerConfig {
  id                Int      @id @default(autoincrement())
  server_id         String   @unique
  config_permission String
  protected         Boolean?
  password_hash     String?
  explorable        Boolean?
  searchable        Boolean?
  join_permission   String?
  server            Server   @relation(fields: [server_id], references: [id], onDelete: Cascade)
}

model ServerMember {
  id        Int     @id @default(autoincrement())
  server_id String
  member_id String
  role      String
  nickname  String?
  icon      String?
  server    Server  @relation(fields: [server_id], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [member_id], references: [id], onDelete: Cascade)

  @@unique([server_id, member_id])
}

model Channel {
  uid           String         @id @default(cuid())
  server_id     String
  channel_name  String
  channel_type  String
  server        Server         @relation(fields: [server_id], references: [id], onDelete: Cascade)
  Conversation  Conversation[]
  notifications Notification[]

  @@unique([server_id, channel_name])
}

model Conversation {
  uid           String                    @id @default(cuid())
  channel_id    String?
  created_at    DateTime                  @default(now())
  messages      Message[]
  participants  ConversationParticipant[]
  channel       Channel?                  @relation(fields: [channel_id], references: [uid])
  notifications Notification[]
}

model ConversationParticipant {
  id              Int          @id @default(autoincrement())
  conversation    Conversation @relation(fields: [conversation_id], references: [uid], onDelete: Cascade)
  conversation_id String
  participant     User         @relation(fields: [participant_id], references: [id], onDelete: Cascade)
  participant_id  String

  @@unique([conversation_id, participant_id])
}

model Message {
  uid              String         @id @default(cuid())
  conversation_uid String
  sender_id        String
  message          String
  created_at       DateTime       @default(now())
  conversation     Conversation   @relation(fields: [conversation_uid], references: [uid], onDelete: Cascade)
  sender           User           @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  notifications    Notification[]
}

model Notification {
  id              String        @id @default(cuid())
  recipient_id    String
  type            String
  read_status     Boolean
  created_at      DateTime      @default(now())
  recipient       User          @relation(fields: [recipient_id], references: [id], onDelete: Cascade)
  message_id      String?
  message         Message?      @relation(fields: [message_id], references: [uid], onDelete: Cascade)
  conversation_id String?
  conversation    Conversation? @relation(fields: [conversation_id], references: [uid], onDelete: Cascade)
  channel_id      String?
  channel         Channel?      @relation(fields: [channel_id], references: [uid], onDelete: Cascade)
  server_id       String?
  server          Server?       @relation(fields: [server_id], references: [id], onDelete: Cascade)
}

model CharacterBase {
  id            String    @id @default(cuid())
  owner_id      String
  name          String
  description   String?
  image         String?
  notes         String?
  owner         User @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  server_stats  ServerCharacter[]
}

model ServerCharacterConfig {
  id                Int @id @default(autoincrement())
  server_id         String @unique
  enable_creation   Boolean
  vitals_count      Int
  vitals_names      String[]
  attributes_count  Int
  attributes_names  String[]
  statics_count     Int
  statics_names     String[]
  server            Server @relation(fields: [server_id], references: [id], onDelete: Cascade)
}

model ServerCharacter {
  id                String @id @default(cuid())
  base_id           String 
  server_id         String
  class             String
  level             Int
  experience        Float
  experience_max    Float
  vitals            Float[]
  vitals_max        Float[]
  attributes        Float[]
  statics           Float[]
  skills            String
  items             String
  base              CharacterBase @relation(fields: [base_id], references: [id], onDelete: Cascade)
  server            Server         @relation(fields: [server_id], references: [id], onDelete: Cascade)

  @@unique([base_id, server_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id         String  @id @default(cuid())
  server_id  String
  expires    String
  used_count Int
  max_uses   Int?
  protected  Boolean
  server     Server  @relation(fields: [server_id], references: [id], onDelete: Cascade)
}

model Note {
  id           String @id @default(cuid())
  author       String // User ID of the note author
  documentName String
  positionX    Int
  positionY    Int
  content      String
  server_id    String
  server       Server @relation(fields: [server_id], references: [id], onDelete: Cascade)
}
